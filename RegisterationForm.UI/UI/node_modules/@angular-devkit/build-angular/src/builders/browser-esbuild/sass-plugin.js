"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSassPlugin = exports.shutdownSassWorkerPool = void 0;
const promises_1 = require("node:fs/promises");
const node_path_1 = require("node:path");
const node_url_1 = require("node:url");
const sass_service_1 = require("../../sass/sass-service");
let sassWorkerPool;
function isSassException(error) {
    return !!error && typeof error === 'object' && 'sassMessage' in error;
}
function shutdownSassWorkerPool() {
    sassWorkerPool === null || sassWorkerPool === void 0 ? void 0 : sassWorkerPool.close();
    sassWorkerPool = undefined;
}
exports.shutdownSassWorkerPool = shutdownSassWorkerPool;
function createSassPlugin(options) {
    return {
        name: 'angular-sass',
        setup(build) {
            const resolveUrl = async (url, previousResolvedModules) => {
                let result = await build.resolve(url, {
                    kind: 'import-rule',
                    // This should ideally be the directory of the importer file from Sass
                    // but that is not currently available from the Sass importer API.
                    resolveDir: build.initialOptions.absWorkingDir,
                });
                // Workaround to support Yarn PnP without access to the importer file from Sass
                if (!result.path && (previousResolvedModules === null || previousResolvedModules === void 0 ? void 0 : previousResolvedModules.size)) {
                    for (const previous of previousResolvedModules) {
                        result = await build.resolve(url, {
                            kind: 'import-rule',
                            resolveDir: previous,
                        });
                        if (result.path) {
                            break;
                        }
                    }
                }
                return result;
            };
            build.onLoad({ filter: /\.s[ac]ss$/ }, async (args) => {
                // Lazily load Sass when a Sass file is found
                sassWorkerPool !== null && sassWorkerPool !== void 0 ? sassWorkerPool : (sassWorkerPool = new sass_service_1.SassWorkerImplementation(true));
                const warnings = [];
                try {
                    const data = await (0, promises_1.readFile)(args.path, 'utf-8');
                    const { css, sourceMap, loadedUrls } = await sassWorkerPool.compileStringAsync(data, {
                        url: (0, node_url_1.pathToFileURL)(args.path),
                        style: 'expanded',
                        loadPaths: options.loadPaths,
                        sourceMap: options.sourcemap,
                        sourceMapIncludeSources: options.sourcemap,
                        quietDeps: true,
                        importers: [
                            {
                                findFileUrl: async (url, { previousResolvedModules }) => {
                                    const result = await resolveUrl(url, previousResolvedModules);
                                    // Check for package deep imports
                                    if (!result.path) {
                                        const parts = url.split('/');
                                        const hasScope = parts.length >= 2 && parts[0].startsWith('@');
                                        const [nameOrScope, nameOrFirstPath, ...pathPart] = parts;
                                        const packageName = hasScope
                                            ? `${nameOrScope}/${nameOrFirstPath}`
                                            : nameOrScope;
                                        const packageResult = await resolveUrl(packageName + '/package.json', previousResolvedModules);
                                        if (packageResult.path) {
                                            return (0, node_url_1.pathToFileURL)((0, node_path_1.join)((0, node_path_1.dirname)(packageResult.path), !hasScope ? nameOrFirstPath : '', ...pathPart));
                                        }
                                    }
                                    return result.path ? (0, node_url_1.pathToFileURL)(result.path) : null;
                                },
                            },
                        ],
                        logger: {
                            warn: (text, { deprecation, span }) => {
                                warnings.push({
                                    text: deprecation ? 'Deprecation' : text,
                                    location: span && {
                                        file: span.url && (0, node_url_1.fileURLToPath)(span.url),
                                        lineText: span.context,
                                        // Sass line numbers are 0-based while esbuild's are 1-based
                                        line: span.start.line + 1,
                                        column: span.start.column,
                                    },
                                    notes: deprecation ? [{ text }] : undefined,
                                });
                            },
                        },
                    });
                    return {
                        loader: 'css',
                        contents: sourceMap
                            ? `${css}\n${sourceMapToUrlComment(sourceMap, (0, node_path_1.dirname)(args.path))}`
                            : css,
                        watchFiles: loadedUrls.map((url) => (0, node_url_1.fileURLToPath)(url)),
                        warnings,
                    };
                }
                catch (error) {
                    if (isSassException(error)) {
                        const file = error.span.url ? (0, node_url_1.fileURLToPath)(error.span.url) : undefined;
                        return {
                            loader: 'css',
                            errors: [
                                {
                                    text: error.message,
                                },
                            ],
                            warnings,
                            watchFiles: file ? [file] : undefined,
                        };
                    }
                    throw error;
                }
            });
        },
    };
}
exports.createSassPlugin = createSassPlugin;
function sourceMapToUrlComment(sourceMap, root) {
    // Remove `file` protocol from all sourcemap sources and adjust to be relative to the input file.
    // This allows esbuild to correctly process the paths.
    sourceMap.sources = sourceMap.sources.map((source) => (0, node_path_1.relative)(root, (0, node_url_1.fileURLToPath)(source)));
    const urlSourceMap = Buffer.from(JSON.stringify(sourceMap), 'utf-8').toString('base64');
    return `/*# sourceMappingURL=data:application/json;charset=utf-8;base64,${urlSourceMap} */`;
}
